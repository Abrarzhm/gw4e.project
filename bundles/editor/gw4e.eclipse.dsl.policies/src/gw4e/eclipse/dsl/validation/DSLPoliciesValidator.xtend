/*
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.validation

import gw4e.eclipse.dsl.dSLPolicies.DSLPoliciesPackage
import gw4e.eclipse.dsl.dSLPolicies.GraphElement
import gw4e.eclipse.dsl.dSLPolicies.GraphPolicies
import gw4e.eclipse.dsl.dSLPolicies.StopCondition
import java.io.File
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.ValidationMessageAcceptor
import org.gw4e.eclipse.facade.GraphWalkerFacade

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DSLPoliciesValidator extends AbstractDSLPoliciesValidator {

	public static val INVALID_PERCENTAGE = 'Invalid percentage'
	public static val INVALID_VERTEX = 'Invalid vertex'
	public static val INVALID_EDGE = 'Invalid edge'
	@Check
	def checkStopCondition(StopCondition condition) {
		var modelFile = EditorHelper.getModelFileName (condition);
		var GraphElement gelt = condition.getGraphelement();
		
		if (gelt !== null) {
			val ge = gelt.getName();
			if ("reached_vertex".equals(condition.getPathtype())) {
				var File folder = EditorHelper.getEditedFileFolder();
				if (folder===null) return;
				var File f = new File(folder, modelFile);
				var boolean valid = GraphWalkerFacade.isValidVertex(f, ge);
				if (!valid) {
					error(INVALID_VERTEX, gelt, DSLPoliciesPackage.Literals.GRAPH_ELEMENT__NAME,
						ValidationMessageAcceptor.INSIGNIFICANT_INDEX, null, null);
				}
			}
			if ("reached_edge".equals(condition.getPathtype())) {
				var File folder = EditorHelper.getEditedFileFolder();
				if (folder===null) return;
				var File f = new File(folder, modelFile);
				var boolean valid = GraphWalkerFacade.isValidEdge(f, ge);
				if (!valid) {
					error(INVALID_EDGE, gelt, DSLPoliciesPackage.Literals.GRAPH_ELEMENT__NAME,
						ValidationMessageAcceptor.INSIGNIFICANT_INDEX, null, null);
				}
			}
		} else {
			val percentage = condition.getPercentage();
			if (percentage !== null) {
				var value = Integer.parseInt(percentage);
				if (value <= 0 || value > 100) {
					error(INVALID_PERCENTAGE, DSLPoliciesPackage.Literals.STOP_CONDITION__PERCENTAGE);
				}
			}
		}
	}
 
}
