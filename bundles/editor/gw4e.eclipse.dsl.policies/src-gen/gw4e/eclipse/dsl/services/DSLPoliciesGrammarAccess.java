/*
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DSLPoliciesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Assignment cGraphPoliciesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cGraphPoliciesGraphPoliciesParserRuleCall_0_1_1_0 = (RuleCall)cGraphPoliciesAssignment_0_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	(NEWLINE* Comment)? (NEWLINE* graphPolicies+=GraphPolicies)+ | NEWLINE*;
		@Override public ParserRule getRule() { return rule; }
		
		//(NEWLINE* Comment)? (NEWLINE* graphPolicies+=GraphPolicies)+ | NEWLINE*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(NEWLINE* Comment)? (NEWLINE* graphPolicies+=GraphPolicies)+
		public Group getGroup_0() { return cGroup_0; }
		
		//(NEWLINE* Comment)?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_0_0_0() { return cNEWLINETerminalRuleCall_0_0_0; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_0_0_1() { return cCommentParserRuleCall_0_0_1; }
		
		//(NEWLINE* graphPolicies+=GraphPolicies)+
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_0_1_0() { return cNEWLINETerminalRuleCall_0_1_0; }
		
		//graphPolicies+=GraphPolicies
		public Assignment getGraphPoliciesAssignment_0_1_1() { return cGraphPoliciesAssignment_0_1_1; }
		
		//GraphPolicies
		public RuleCall getGraphPoliciesGraphPoliciesParserRuleCall_0_1_1_0() { return cGraphPoliciesGraphPoliciesParserRuleCall_0_1_1_0; }
		
		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.Comment");
		private final RuleCall cFORMAT_COMMENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Comment:
		//	FORMAT_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//FORMAT_COMMENT
		public RuleCall getFORMAT_COMMENTTerminalRuleCall() { return cFORMAT_COMMENTTerminalRuleCall; }
	}
	public class GraphPoliciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.GraphPolicies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGraphModelPoliciesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGraphModelPoliciesModelNameParserRuleCall_0_0 = (RuleCall)cGraphModelPoliciesAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPoliciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPoliciesPoliciesParserRuleCall_2_0 = (RuleCall)cPoliciesAssignment_2.eContents().get(0);
		
		//GraphPolicies:
		//	graphModelPolicies=ModelName "=" policies+=Policies+;
		@Override public ParserRule getRule() { return rule; }
		
		//graphModelPolicies=ModelName "=" policies+=Policies+
		public Group getGroup() { return cGroup; }
		
		//graphModelPolicies=ModelName
		public Assignment getGraphModelPoliciesAssignment_0() { return cGraphModelPoliciesAssignment_0; }
		
		//ModelName
		public RuleCall getGraphModelPoliciesModelNameParserRuleCall_0_0() { return cGraphModelPoliciesModelNameParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//policies+=Policies+
		public Assignment getPoliciesAssignment_2() { return cPoliciesAssignment_2; }
		
		//Policies
		public RuleCall getPoliciesPoliciesParserRuleCall_2_0() { return cPoliciesPoliciesParserRuleCall_2_0; }
	}
	public class ModelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.ModelName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cJsonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cGraphmlKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ModelName:
		//	ID '.json' | ID '.graphml';
		@Override public ParserRule getRule() { return rule; }
		
		//ID '.json' | ID '.graphml'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID '.json'
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'.json'
		public Keyword getJsonKeyword_0_1() { return cJsonKeyword_0_1; }
		
		//ID '.graphml'
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'.graphml'
		public Keyword getGraphmlKeyword_1_1() { return cGraphmlKeyword_1_1; }
	}
	public class SeverityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.Severity");
		private final Assignment cLevelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLevelSEVTerminalRuleCall_0 = (RuleCall)cLevelAssignment.eContents().get(0);
		
		//Severity:
		//	level=SEV;
		@Override public ParserRule getRule() { return rule; }
		
		//level=SEV
		public Assignment getLevelAssignment() { return cLevelAssignment; }
		
		//SEV
		public RuleCall getLevelSEVTerminalRuleCall_0() { return cLevelSEVTerminalRuleCall_0; }
	}
	public class PoliciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.Policies");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPoliciesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNocheckAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNocheckNocheckKeyword_0_1_0 = (Keyword)cNocheckAssignment_0_1.eContents().get(0);
		private final Assignment cSyncAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSyncSyncKeyword_1_0 = (Keyword)cSyncAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPathgeneratorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPathgeneratorPathGeneratorStopConditionParserRuleCall_2_0_0 = (RuleCall)cPathgeneratorAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSpaceKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPathgeneratorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPathgeneratorPathGeneratorStopConditionParserRuleCall_2_1_1_0 = (RuleCall)cPathgeneratorAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSeverityAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSeveritySeverityParserRuleCall_2_3_0 = (RuleCall)cSeverityAssignment_2_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Policies hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{Policies} nocheck?='nocheck' | sync?='sync' | pathgenerator+=PathGeneratorStopCondition (' '
		//	pathgenerator+=PathGeneratorStopCondition)* ';' severity=Severity ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Policies} nocheck?='nocheck' | sync?='sync' | pathgenerator+=PathGeneratorStopCondition (' '
		//pathgenerator+=PathGeneratorStopCondition)* ';' severity=Severity ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Policies} nocheck?='nocheck'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Policies}
		public Action getPoliciesAction_0_0() { return cPoliciesAction_0_0; }
		
		//nocheck?='nocheck'
		public Assignment getNocheckAssignment_0_1() { return cNocheckAssignment_0_1; }
		
		//'nocheck'
		public Keyword getNocheckNocheckKeyword_0_1_0() { return cNocheckNocheckKeyword_0_1_0; }
		
		//sync?='sync'
		public Assignment getSyncAssignment_1() { return cSyncAssignment_1; }
		
		//'sync'
		public Keyword getSyncSyncKeyword_1_0() { return cSyncSyncKeyword_1_0; }
		
		//pathgenerator+=PathGeneratorStopCondition (' ' pathgenerator+=PathGeneratorStopCondition)* ';' severity=Severity ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//pathgenerator+=PathGeneratorStopCondition
		public Assignment getPathgeneratorAssignment_2_0() { return cPathgeneratorAssignment_2_0; }
		
		//PathGeneratorStopCondition
		public RuleCall getPathgeneratorPathGeneratorStopConditionParserRuleCall_2_0_0() { return cPathgeneratorPathGeneratorStopConditionParserRuleCall_2_0_0; }
		
		//(' ' pathgenerator+=PathGeneratorStopCondition)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//' '
		public Keyword getSpaceKeyword_2_1_0() { return cSpaceKeyword_2_1_0; }
		
		//pathgenerator+=PathGeneratorStopCondition
		public Assignment getPathgeneratorAssignment_2_1_1() { return cPathgeneratorAssignment_2_1_1; }
		
		//PathGeneratorStopCondition
		public RuleCall getPathgeneratorPathGeneratorStopConditionParserRuleCall_2_1_1_0() { return cPathgeneratorPathGeneratorStopConditionParserRuleCall_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
		
		//severity=Severity
		public Assignment getSeverityAssignment_2_3() { return cSeverityAssignment_2_3; }
		
		//Severity
		public RuleCall getSeveritySeverityParserRuleCall_2_3_0() { return cSeveritySeverityParserRuleCall_2_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}
	public class PathGeneratorStopConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.PathGeneratorStopCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathGeneratorStopConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAlgorithmTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAlgorithmTypeAlgorithmTypeParserRuleCall_1_0 = (RuleCall)cAlgorithmTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStopConditionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStopConditionStringConditionParserRuleCall_3_0_0 = (RuleCall)cStopConditionAssignment_3_0.eContents().get(0);
		private final Assignment cStopConditionypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStopConditionypeIntegerStopConditionParserRuleCall_3_1_0 = (RuleCall)cStopConditionypeAssignment_3_1.eContents().get(0);
		private final Assignment cStopConditionAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cStopConditionPercentageConditionParserRuleCall_3_2_0 = (RuleCall)cStopConditionAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cWSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PathGeneratorStopCondition hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{PathGeneratorStopCondition} algorithmType=AlgorithmType '(' (stopCondition=StringCondition |
		//	stopConditionype=IntegerStopCondition | stopCondition=PercentageCondition) ')' WS*;
		@Override public ParserRule getRule() { return rule; }
		
		//{PathGeneratorStopCondition} algorithmType=AlgorithmType '(' (stopCondition=StringCondition |
		//stopConditionype=IntegerStopCondition | stopCondition=PercentageCondition) ')' WS*
		public Group getGroup() { return cGroup; }
		
		//{PathGeneratorStopCondition}
		public Action getPathGeneratorStopConditionAction_0() { return cPathGeneratorStopConditionAction_0; }
		
		//algorithmType=AlgorithmType
		public Assignment getAlgorithmTypeAssignment_1() { return cAlgorithmTypeAssignment_1; }
		
		//AlgorithmType
		public RuleCall getAlgorithmTypeAlgorithmTypeParserRuleCall_1_0() { return cAlgorithmTypeAlgorithmTypeParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//stopCondition=StringCondition | stopConditionype=IntegerStopCondition | stopCondition=PercentageCondition
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//stopCondition=StringCondition
		public Assignment getStopConditionAssignment_3_0() { return cStopConditionAssignment_3_0; }
		
		//StringCondition
		public RuleCall getStopConditionStringConditionParserRuleCall_3_0_0() { return cStopConditionStringConditionParserRuleCall_3_0_0; }
		
		//stopConditionype=IntegerStopCondition
		public Assignment getStopConditionypeAssignment_3_1() { return cStopConditionypeAssignment_3_1; }
		
		//IntegerStopCondition
		public RuleCall getStopConditionypeIntegerStopConditionParserRuleCall_3_1_0() { return cStopConditionypeIntegerStopConditionParserRuleCall_3_1_0; }
		
		//stopCondition=PercentageCondition
		public Assignment getStopConditionAssignment_3_2() { return cStopConditionAssignment_3_2; }
		
		//PercentageCondition
		public RuleCall getStopConditionPercentageConditionParserRuleCall_3_2_0() { return cStopConditionPercentageConditionParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_5() { return cWSTerminalRuleCall_5; }
	}
	public class AlgorithmTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.AlgorithmType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeRandomKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeRandomPathKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeQuick_randomKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeQuickRandomPathKeyword_3_0 = (Keyword)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeA_starKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final Assignment cTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cTypeAStarPathKeyword_5_0 = (Keyword)cTypeAssignment_5.eContents().get(0);
		private final Assignment cTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cTypeWeighted_randomKeyword_6_0 = (Keyword)cTypeAssignment_6.eContents().get(0);
		private final Assignment cTypeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cTypeWeightedRandomPathKeyword_7_0 = (Keyword)cTypeAssignment_7.eContents().get(0);
		
		//AlgorithmType:
		//	type='random' | type='RandomPath' | type='quick_random' | type='QuickRandomPath' | type='a_star' | type='AStarPath' |
		//	type='weighted_random' | type='WeightedRandomPath';
		@Override public ParserRule getRule() { return rule; }
		
		//type='random' | type='RandomPath' | type='quick_random' | type='QuickRandomPath' | type='a_star' | type='AStarPath' |
		//type='weighted_random' | type='WeightedRandomPath'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='random'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'random'
		public Keyword getTypeRandomKeyword_0_0() { return cTypeRandomKeyword_0_0; }
		
		//type='RandomPath'
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//'RandomPath'
		public Keyword getTypeRandomPathKeyword_1_0() { return cTypeRandomPathKeyword_1_0; }
		
		//type='quick_random'
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//'quick_random'
		public Keyword getTypeQuick_randomKeyword_2_0() { return cTypeQuick_randomKeyword_2_0; }
		
		//type='QuickRandomPath'
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//'QuickRandomPath'
		public Keyword getTypeQuickRandomPathKeyword_3_0() { return cTypeQuickRandomPathKeyword_3_0; }
		
		//type='a_star'
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//'a_star'
		public Keyword getTypeA_starKeyword_4_0() { return cTypeA_starKeyword_4_0; }
		
		//type='AStarPath'
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//'AStarPath'
		public Keyword getTypeAStarPathKeyword_5_0() { return cTypeAStarPathKeyword_5_0; }
		
		//type='weighted_random'
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//'weighted_random'
		public Keyword getTypeWeighted_randomKeyword_6_0() { return cTypeWeighted_randomKeyword_6_0; }
		
		//type='WeightedRandomPath'
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//'WeightedRandomPath'
		public Keyword getTypeWeightedRandomPathKeyword_7_0() { return cTypeWeightedRandomPathKeyword_7_0; }
	}
	public class IntegerStopConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.IntegerStopCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPathtypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPathtypeTime_durationKeyword_0_0_0 = (Keyword)cPathtypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPathtypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPathtypeTimeDurationKeyword_1_0_0 = (Keyword)cPathtypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPathtypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cPathtypeDependency_edge_coverageKeyword_2_0_0 = (Keyword)cPathtypeAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPathtypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cPathtypeDependencyEdgeCoverageKeyword_3_0_0 = (Keyword)cPathtypeAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//IntegerStopCondition StopCondition:
		//	pathtype='time_duration' '(' value=INT ')' | pathtype='TimeDuration' '(' value=INT ')' |
		//	pathtype='dependency_edge_coverage' '(' value=INT ')' | pathtype='DependencyEdgeCoverage' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//pathtype='time_duration' '(' value=INT ')' | pathtype='TimeDuration' '(' value=INT ')' |
		//pathtype='dependency_edge_coverage' '(' value=INT ')' | pathtype='DependencyEdgeCoverage' '(' value=INT ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathtype='time_duration' '(' value=INT ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//pathtype='time_duration'
		public Assignment getPathtypeAssignment_0_0() { return cPathtypeAssignment_0_0; }
		
		//'time_duration'
		public Keyword getPathtypeTime_durationKeyword_0_0_0() { return cPathtypeTime_durationKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//value=INT
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_2_0() { return cValueINTTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//pathtype='TimeDuration' '(' value=INT ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//pathtype='TimeDuration'
		public Assignment getPathtypeAssignment_1_0() { return cPathtypeAssignment_1_0; }
		
		//'TimeDuration'
		public Keyword getPathtypeTimeDurationKeyword_1_0_0() { return cPathtypeTimeDurationKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//value=INT
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_2_0() { return cValueINTTerminalRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//pathtype='dependency_edge_coverage' '(' value=INT ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//pathtype='dependency_edge_coverage'
		public Assignment getPathtypeAssignment_2_0() { return cPathtypeAssignment_2_0; }
		
		//'dependency_edge_coverage'
		public Keyword getPathtypeDependency_edge_coverageKeyword_2_0_0() { return cPathtypeDependency_edge_coverageKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//value=INT
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_2_0() { return cValueINTTerminalRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//pathtype='DependencyEdgeCoverage' '(' value=INT ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//pathtype='DependencyEdgeCoverage'
		public Assignment getPathtypeAssignment_3_0() { return cPathtypeAssignment_3_0; }
		
		//'DependencyEdgeCoverage'
		public Keyword getPathtypeDependencyEdgeCoverageKeyword_3_0_0() { return cPathtypeDependencyEdgeCoverageKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//value=INT
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_2_0() { return cValueINTTerminalRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class PercentageConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.PercentageCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPathtypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPathtypeEdge_coverageKeyword_0_0_0 = (Keyword)cPathtypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPercentageAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPercentagePercentParserRuleCall_0_2_0 = (RuleCall)cPercentageAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPathtypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPathtypeEdgeCoverageKeyword_1_0_0 = (Keyword)cPathtypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPercentageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPercentagePercentParserRuleCall_1_2_0 = (RuleCall)cPercentageAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPathtypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cPathtypeVertex_coverageKeyword_2_0_0 = (Keyword)cPathtypeAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPercentageAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPercentagePercentParserRuleCall_2_2_0 = (RuleCall)cPercentageAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPathtypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cPathtypeVertexCoverageKeyword_3_0_0 = (Keyword)cPathtypeAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cPercentageAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPercentagePercentParserRuleCall_3_2_0 = (RuleCall)cPercentageAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cPathtypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cPathtypeRequirement_coverageKeyword_4_0_0 = (Keyword)cPathtypeAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPercentageAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPercentagePercentParserRuleCall_4_2_0 = (RuleCall)cPercentageAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cPathtypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cPathtypeRequirementCoverageKeyword_5_0_0 = (Keyword)cPathtypeAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPercentageAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPercentagePercentParserRuleCall_5_2_0 = (RuleCall)cPercentageAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//PercentageCondition StopCondition:
		//	pathtype='edge_coverage' '(' percentage=Percent ')' | pathtype='EdgeCoverage' '(' percentage=Percent ')' |
		//	pathtype='vertex_coverage' '(' percentage=Percent ')' | pathtype='VertexCoverage' '(' percentage=Percent ')' |
		//	pathtype='requirement_coverage' '(' percentage=Percent ')' | pathtype='RequirementCoverage' '(' percentage=Percent
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//pathtype='edge_coverage' '(' percentage=Percent ')' | pathtype='EdgeCoverage' '(' percentage=Percent ')' |
		//pathtype='vertex_coverage' '(' percentage=Percent ')' | pathtype='VertexCoverage' '(' percentage=Percent ')' |
		//pathtype='requirement_coverage' '(' percentage=Percent ')' | pathtype='RequirementCoverage' '(' percentage=Percent ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathtype='edge_coverage' '(' percentage=Percent ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//pathtype='edge_coverage'
		public Assignment getPathtypeAssignment_0_0() { return cPathtypeAssignment_0_0; }
		
		//'edge_coverage'
		public Keyword getPathtypeEdge_coverageKeyword_0_0_0() { return cPathtypeEdge_coverageKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//percentage=Percent
		public Assignment getPercentageAssignment_0_2() { return cPercentageAssignment_0_2; }
		
		//Percent
		public RuleCall getPercentagePercentParserRuleCall_0_2_0() { return cPercentagePercentParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//pathtype='EdgeCoverage' '(' percentage=Percent ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//pathtype='EdgeCoverage'
		public Assignment getPathtypeAssignment_1_0() { return cPathtypeAssignment_1_0; }
		
		//'EdgeCoverage'
		public Keyword getPathtypeEdgeCoverageKeyword_1_0_0() { return cPathtypeEdgeCoverageKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//percentage=Percent
		public Assignment getPercentageAssignment_1_2() { return cPercentageAssignment_1_2; }
		
		//Percent
		public RuleCall getPercentagePercentParserRuleCall_1_2_0() { return cPercentagePercentParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//pathtype='vertex_coverage' '(' percentage=Percent ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//pathtype='vertex_coverage'
		public Assignment getPathtypeAssignment_2_0() { return cPathtypeAssignment_2_0; }
		
		//'vertex_coverage'
		public Keyword getPathtypeVertex_coverageKeyword_2_0_0() { return cPathtypeVertex_coverageKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//percentage=Percent
		public Assignment getPercentageAssignment_2_2() { return cPercentageAssignment_2_2; }
		
		//Percent
		public RuleCall getPercentagePercentParserRuleCall_2_2_0() { return cPercentagePercentParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//pathtype='VertexCoverage' '(' percentage=Percent ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//pathtype='VertexCoverage'
		public Assignment getPathtypeAssignment_3_0() { return cPathtypeAssignment_3_0; }
		
		//'VertexCoverage'
		public Keyword getPathtypeVertexCoverageKeyword_3_0_0() { return cPathtypeVertexCoverageKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//percentage=Percent
		public Assignment getPercentageAssignment_3_2() { return cPercentageAssignment_3_2; }
		
		//Percent
		public RuleCall getPercentagePercentParserRuleCall_3_2_0() { return cPercentagePercentParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//pathtype='requirement_coverage' '(' percentage=Percent ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//pathtype='requirement_coverage'
		public Assignment getPathtypeAssignment_4_0() { return cPathtypeAssignment_4_0; }
		
		//'requirement_coverage'
		public Keyword getPathtypeRequirement_coverageKeyword_4_0_0() { return cPathtypeRequirement_coverageKeyword_4_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//percentage=Percent
		public Assignment getPercentageAssignment_4_2() { return cPercentageAssignment_4_2; }
		
		//Percent
		public RuleCall getPercentagePercentParserRuleCall_4_2_0() { return cPercentagePercentParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//pathtype='RequirementCoverage' '(' percentage=Percent ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//pathtype='RequirementCoverage'
		public Assignment getPathtypeAssignment_5_0() { return cPathtypeAssignment_5_0; }
		
		//'RequirementCoverage'
		public Keyword getPathtypeRequirementCoverageKeyword_5_0_0() { return cPathtypeRequirementCoverageKeyword_5_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//percentage=Percent
		public Assignment getPercentageAssignment_5_2() { return cPercentageAssignment_5_2; }
		
		//Percent
		public RuleCall getPercentagePercentParserRuleCall_5_2_0() { return cPercentagePercentParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class StringConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.StringCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPathtypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPathtypeReached_vertexKeyword_0_0_0 = (Keyword)cPathtypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cGraphelementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cGraphelementGraphElementParserRuleCall_0_2_0 = (RuleCall)cGraphelementAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPathtypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPathtypeReachedVertexKeyword_1_0_0 = (Keyword)cPathtypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cGraphelementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cGraphelementGraphElementParserRuleCall_1_2_0 = (RuleCall)cGraphelementAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPathtypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cPathtypeReached_edgeKeyword_2_0_0 = (Keyword)cPathtypeAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cGraphelementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cGraphelementGraphElementParserRuleCall_2_2_0 = (RuleCall)cGraphelementAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPathtypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cPathtypeReachedEdgeKeyword_3_0_0 = (Keyword)cPathtypeAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cGraphelementAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cGraphelementGraphElementParserRuleCall_3_2_0 = (RuleCall)cGraphelementAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//StringCondition StopCondition hidden(WS, ML_COMMENT, SL_COMMENT):
		//	pathtype='reached_vertex' '(' graphelement=GraphElement ')' | pathtype='ReachedVertex' '(' graphelement=GraphElement
		//	')' | pathtype='reached_edge' '(' graphelement=GraphElement ')' | pathtype='ReachedEdge' '(' graphelement=GraphElement
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//pathtype='reached_vertex' '(' graphelement=GraphElement ')' | pathtype='ReachedVertex' '(' graphelement=GraphElement ')'
		//| pathtype='reached_edge' '(' graphelement=GraphElement ')' | pathtype='ReachedEdge' '(' graphelement=GraphElement ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathtype='reached_vertex' '(' graphelement=GraphElement ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//pathtype='reached_vertex'
		public Assignment getPathtypeAssignment_0_0() { return cPathtypeAssignment_0_0; }
		
		//'reached_vertex'
		public Keyword getPathtypeReached_vertexKeyword_0_0_0() { return cPathtypeReached_vertexKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//graphelement=GraphElement
		public Assignment getGraphelementAssignment_0_2() { return cGraphelementAssignment_0_2; }
		
		//GraphElement
		public RuleCall getGraphelementGraphElementParserRuleCall_0_2_0() { return cGraphelementGraphElementParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//pathtype='ReachedVertex' '(' graphelement=GraphElement ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//pathtype='ReachedVertex'
		public Assignment getPathtypeAssignment_1_0() { return cPathtypeAssignment_1_0; }
		
		//'ReachedVertex'
		public Keyword getPathtypeReachedVertexKeyword_1_0_0() { return cPathtypeReachedVertexKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//graphelement=GraphElement
		public Assignment getGraphelementAssignment_1_2() { return cGraphelementAssignment_1_2; }
		
		//GraphElement
		public RuleCall getGraphelementGraphElementParserRuleCall_1_2_0() { return cGraphelementGraphElementParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//pathtype='reached_edge' '(' graphelement=GraphElement ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//pathtype='reached_edge'
		public Assignment getPathtypeAssignment_2_0() { return cPathtypeAssignment_2_0; }
		
		//'reached_edge'
		public Keyword getPathtypeReached_edgeKeyword_2_0_0() { return cPathtypeReached_edgeKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//graphelement=GraphElement
		public Assignment getGraphelementAssignment_2_2() { return cGraphelementAssignment_2_2; }
		
		//GraphElement
		public RuleCall getGraphelementGraphElementParserRuleCall_2_2_0() { return cGraphelementGraphElementParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//pathtype='ReachedEdge' '(' graphelement=GraphElement ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//pathtype='ReachedEdge'
		public Assignment getPathtypeAssignment_3_0() { return cPathtypeAssignment_3_0; }
		
		//'ReachedEdge'
		public Keyword getPathtypeReachedEdgeKeyword_3_0_0() { return cPathtypeReachedEdgeKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//graphelement=GraphElement
		public Assignment getGraphelementAssignment_3_2() { return cGraphelementAssignment_3_2; }
		
		//GraphElement
		public RuleCall getGraphelementGraphElementParserRuleCall_3_2_0() { return cGraphelementGraphElementParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class PercentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.Percent");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Percent:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class GraphElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.GraphElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//GraphElement:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tSEV;
	private final TerminalRule tFORMAT_COMMENT;
	private final TerminalRule tNEWLINE;
	private final CommentElements pComment;
	private final GraphPoliciesElements pGraphPolicies;
	private final ModelNameElements pModelName;
	private final SeverityElements pSeverity;
	private final PoliciesElements pPolicies;
	private final PathGeneratorStopConditionElements pPathGeneratorStopCondition;
	private final AlgorithmTypeElements pAlgorithmType;
	private final IntegerStopConditionElements pIntegerStopCondition;
	private final PercentageConditionElements pPercentageCondition;
	private final StringConditionElements pStringCondition;
	private final PercentElements pPercent;
	private final GraphElementElements pGraphElement;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DSLPoliciesGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.tSEV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.SEV");
		this.tFORMAT_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.FORMAT_COMMENT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "gw4e.eclipse.dsl.DSLPolicies.NEWLINE");
		this.pComment = new CommentElements();
		this.pGraphPolicies = new GraphPoliciesElements();
		this.pModelName = new ModelNameElements();
		this.pSeverity = new SeverityElements();
		this.pPolicies = new PoliciesElements();
		this.pPathGeneratorStopCondition = new PathGeneratorStopConditionElements();
		this.pAlgorithmType = new AlgorithmTypeElements();
		this.pIntegerStopCondition = new IntegerStopConditionElements();
		this.pPercentageCondition = new PercentageConditionElements();
		this.pStringCondition = new StringConditionElements();
		this.pPercent = new PercentElements();
		this.pGraphElement = new GraphElementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gw4e.eclipse.dsl.DSLPolicies".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//	(NEWLINE* Comment)? (NEWLINE* graphPolicies+=GraphPolicies)+ | NEWLINE*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal SEV:
	//	'W' | 'I' | 'E';
	public TerminalRule getSEVRule() {
		return tSEV;
	}
	
	//terminal FORMAT_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getFORMAT_COMMENTRule() {
		return tFORMAT_COMMENT;
	}
	
	//terminal NEWLINE:
	//	'\r'? '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//Comment:
	//	FORMAT_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//GraphPolicies:
	//	graphModelPolicies=ModelName "=" policies+=Policies+;
	public GraphPoliciesElements getGraphPoliciesAccess() {
		return pGraphPolicies;
	}
	
	public ParserRule getGraphPoliciesRule() {
		return getGraphPoliciesAccess().getRule();
	}
	
	//ModelName:
	//	ID '.json' | ID '.graphml';
	public ModelNameElements getModelNameAccess() {
		return pModelName;
	}
	
	public ParserRule getModelNameRule() {
		return getModelNameAccess().getRule();
	}
	
	//Severity:
	//	level=SEV;
	public SeverityElements getSeverityAccess() {
		return pSeverity;
	}
	
	public ParserRule getSeverityRule() {
		return getSeverityAccess().getRule();
	}
	
	//Policies hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{Policies} nocheck?='nocheck' | sync?='sync' | pathgenerator+=PathGeneratorStopCondition (' '
	//	pathgenerator+=PathGeneratorStopCondition)* ';' severity=Severity ';';
	public PoliciesElements getPoliciesAccess() {
		return pPolicies;
	}
	
	public ParserRule getPoliciesRule() {
		return getPoliciesAccess().getRule();
	}
	
	//PathGeneratorStopCondition hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{PathGeneratorStopCondition} algorithmType=AlgorithmType '(' (stopCondition=StringCondition |
	//	stopConditionype=IntegerStopCondition | stopCondition=PercentageCondition) ')' WS*;
	public PathGeneratorStopConditionElements getPathGeneratorStopConditionAccess() {
		return pPathGeneratorStopCondition;
	}
	
	public ParserRule getPathGeneratorStopConditionRule() {
		return getPathGeneratorStopConditionAccess().getRule();
	}
	
	//AlgorithmType:
	//	type='random' | type='RandomPath' | type='quick_random' | type='QuickRandomPath' | type='a_star' | type='AStarPath' |
	//	type='weighted_random' | type='WeightedRandomPath';
	public AlgorithmTypeElements getAlgorithmTypeAccess() {
		return pAlgorithmType;
	}
	
	public ParserRule getAlgorithmTypeRule() {
		return getAlgorithmTypeAccess().getRule();
	}
	
	//IntegerStopCondition StopCondition:
	//	pathtype='time_duration' '(' value=INT ')' | pathtype='TimeDuration' '(' value=INT ')' |
	//	pathtype='dependency_edge_coverage' '(' value=INT ')' | pathtype='DependencyEdgeCoverage' '(' value=INT ')';
	public IntegerStopConditionElements getIntegerStopConditionAccess() {
		return pIntegerStopCondition;
	}
	
	public ParserRule getIntegerStopConditionRule() {
		return getIntegerStopConditionAccess().getRule();
	}
	
	//PercentageCondition StopCondition:
	//	pathtype='edge_coverage' '(' percentage=Percent ')' | pathtype='EdgeCoverage' '(' percentage=Percent ')' |
	//	pathtype='vertex_coverage' '(' percentage=Percent ')' | pathtype='VertexCoverage' '(' percentage=Percent ')' |
	//	pathtype='requirement_coverage' '(' percentage=Percent ')' | pathtype='RequirementCoverage' '(' percentage=Percent
	//	')';
	public PercentageConditionElements getPercentageConditionAccess() {
		return pPercentageCondition;
	}
	
	public ParserRule getPercentageConditionRule() {
		return getPercentageConditionAccess().getRule();
	}
	
	//StringCondition StopCondition hidden(WS, ML_COMMENT, SL_COMMENT):
	//	pathtype='reached_vertex' '(' graphelement=GraphElement ')' | pathtype='ReachedVertex' '(' graphelement=GraphElement
	//	')' | pathtype='reached_edge' '(' graphelement=GraphElement ')' | pathtype='ReachedEdge' '(' graphelement=GraphElement
	//	')';
	public StringConditionElements getStringConditionAccess() {
		return pStringCondition;
	}
	
	public ParserRule getStringConditionRule() {
		return getStringConditionAccess().getRule();
	}
	
	//Percent:
	//	INT;
	public PercentElements getPercentAccess() {
		return pPercent;
	}
	
	public ParserRule getPercentRule() {
		return getPercentAccess().getRule();
	}
	
	//GraphElement:
	//	name=ID;
	public GraphElementElements getGraphElementAccess() {
		return pGraphElement;
	}
	
	public ParserRule getGraphElementRule() {
		return getGraphElementAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
