/**
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.dSLPolicies.impl;

import gw4e.eclipse.dsl.dSLPolicies.DSLPoliciesPackage;
import gw4e.eclipse.dsl.dSLPolicies.PathGeneratorStopCondition;
import gw4e.eclipse.dsl.dSLPolicies.Policies;
import gw4e.eclipse.dsl.dSLPolicies.Severity;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Policies</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link gw4e.eclipse.dsl.dSLPolicies.impl.PoliciesImpl#isNocheck <em>Nocheck</em>}</li>
 *   <li>{@link gw4e.eclipse.dsl.dSLPolicies.impl.PoliciesImpl#isSync <em>Sync</em>}</li>
 *   <li>{@link gw4e.eclipse.dsl.dSLPolicies.impl.PoliciesImpl#getPathgenerator <em>Pathgenerator</em>}</li>
 *   <li>{@link gw4e.eclipse.dsl.dSLPolicies.impl.PoliciesImpl#getSeverity <em>Severity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PoliciesImpl extends MinimalEObjectImpl.Container implements Policies
{
  /**
   * The default value of the '{@link #isNocheck() <em>Nocheck</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNocheck()
   * @generated
   * @ordered
   */
  protected static final boolean NOCHECK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNocheck() <em>Nocheck</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNocheck()
   * @generated
   * @ordered
   */
  protected boolean nocheck = NOCHECK_EDEFAULT;

  /**
   * The default value of the '{@link #isSync() <em>Sync</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSync()
   * @generated
   * @ordered
   */
  protected static final boolean SYNC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSync() <em>Sync</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSync()
   * @generated
   * @ordered
   */
  protected boolean sync = SYNC_EDEFAULT;

  /**
   * The cached value of the '{@link #getPathgenerator() <em>Pathgenerator</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathgenerator()
   * @generated
   * @ordered
   */
  protected EList<PathGeneratorStopCondition> pathgenerator;

  /**
   * The cached value of the '{@link #getSeverity() <em>Severity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSeverity()
   * @generated
   * @ordered
   */
  protected Severity severity;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PoliciesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPoliciesPackage.Literals.POLICIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNocheck()
  {
    return nocheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNocheck(boolean newNocheck)
  {
    boolean oldNocheck = nocheck;
    nocheck = newNocheck;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPoliciesPackage.POLICIES__NOCHECK, oldNocheck, nocheck));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isSync()
  {
    return sync;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSync(boolean newSync)
  {
    boolean oldSync = sync;
    sync = newSync;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPoliciesPackage.POLICIES__SYNC, oldSync, sync));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PathGeneratorStopCondition> getPathgenerator()
  {
    if (pathgenerator == null)
    {
      pathgenerator = new EObjectContainmentEList<PathGeneratorStopCondition>(PathGeneratorStopCondition.class, this, DSLPoliciesPackage.POLICIES__PATHGENERATOR);
    }
    return pathgenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Severity getSeverity()
  {
    return severity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSeverity(Severity newSeverity, NotificationChain msgs)
  {
    Severity oldSeverity = severity;
    severity = newSeverity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPoliciesPackage.POLICIES__SEVERITY, oldSeverity, newSeverity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSeverity(Severity newSeverity)
  {
    if (newSeverity != severity)
    {
      NotificationChain msgs = null;
      if (severity != null)
        msgs = ((InternalEObject)severity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPoliciesPackage.POLICIES__SEVERITY, null, msgs);
      if (newSeverity != null)
        msgs = ((InternalEObject)newSeverity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPoliciesPackage.POLICIES__SEVERITY, null, msgs);
      msgs = basicSetSeverity(newSeverity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPoliciesPackage.POLICIES__SEVERITY, newSeverity, newSeverity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DSLPoliciesPackage.POLICIES__PATHGENERATOR:
        return ((InternalEList<?>)getPathgenerator()).basicRemove(otherEnd, msgs);
      case DSLPoliciesPackage.POLICIES__SEVERITY:
        return basicSetSeverity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPoliciesPackage.POLICIES__NOCHECK:
        return isNocheck();
      case DSLPoliciesPackage.POLICIES__SYNC:
        return isSync();
      case DSLPoliciesPackage.POLICIES__PATHGENERATOR:
        return getPathgenerator();
      case DSLPoliciesPackage.POLICIES__SEVERITY:
        return getSeverity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPoliciesPackage.POLICIES__NOCHECK:
        setNocheck((Boolean)newValue);
        return;
      case DSLPoliciesPackage.POLICIES__SYNC:
        setSync((Boolean)newValue);
        return;
      case DSLPoliciesPackage.POLICIES__PATHGENERATOR:
        getPathgenerator().clear();
        getPathgenerator().addAll((Collection<? extends PathGeneratorStopCondition>)newValue);
        return;
      case DSLPoliciesPackage.POLICIES__SEVERITY:
        setSeverity((Severity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPoliciesPackage.POLICIES__NOCHECK:
        setNocheck(NOCHECK_EDEFAULT);
        return;
      case DSLPoliciesPackage.POLICIES__SYNC:
        setSync(SYNC_EDEFAULT);
        return;
      case DSLPoliciesPackage.POLICIES__PATHGENERATOR:
        getPathgenerator().clear();
        return;
      case DSLPoliciesPackage.POLICIES__SEVERITY:
        setSeverity((Severity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPoliciesPackage.POLICIES__NOCHECK:
        return nocheck != NOCHECK_EDEFAULT;
      case DSLPoliciesPackage.POLICIES__SYNC:
        return sync != SYNC_EDEFAULT;
      case DSLPoliciesPackage.POLICIES__PATHGENERATOR:
        return pathgenerator != null && !pathgenerator.isEmpty();
      case DSLPoliciesPackage.POLICIES__SEVERITY:
        return severity != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nocheck: ");
    result.append(nocheck);
    result.append(", sync: ");
    result.append(sync);
    result.append(')');
    return result.toString();
  }

} //PoliciesImpl
