/**
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.dSLPolicies.util;

import gw4e.eclipse.dsl.dSLPolicies.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see gw4e.eclipse.dsl.dSLPolicies.DSLPoliciesPackage
 * @generated
 */
public class DSLPoliciesAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DSLPoliciesPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLPoliciesAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DSLPoliciesPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLPoliciesSwitch<Adapter> modelSwitch =
    new DSLPoliciesSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseGraphPolicies(GraphPolicies object)
      {
        return createGraphPoliciesAdapter();
      }
      @Override
      public Adapter caseSeverity(Severity object)
      {
        return createSeverityAdapter();
      }
      @Override
      public Adapter casePolicies(Policies object)
      {
        return createPoliciesAdapter();
      }
      @Override
      public Adapter casePathGeneratorStopCondition(PathGeneratorStopCondition object)
      {
        return createPathGeneratorStopConditionAdapter();
      }
      @Override
      public Adapter caseAlgorithmType(AlgorithmType object)
      {
        return createAlgorithmTypeAdapter();
      }
      @Override
      public Adapter caseStopCondition(StopCondition object)
      {
        return createStopConditionAdapter();
      }
      @Override
      public Adapter caseGraphElement(GraphElement object)
      {
        return createGraphElementAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.GraphPolicies <em>Graph Policies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.GraphPolicies
   * @generated
   */
  public Adapter createGraphPoliciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.Severity <em>Severity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.Severity
   * @generated
   */
  public Adapter createSeverityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.Policies <em>Policies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.Policies
   * @generated
   */
  public Adapter createPoliciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.PathGeneratorStopCondition <em>Path Generator Stop Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.PathGeneratorStopCondition
   * @generated
   */
  public Adapter createPathGeneratorStopConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.AlgorithmType <em>Algorithm Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.AlgorithmType
   * @generated
   */
  public Adapter createAlgorithmTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.StopCondition <em>Stop Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.StopCondition
   * @generated
   */
  public Adapter createStopConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gw4e.eclipse.dsl.dSLPolicies.GraphElement <em>Graph Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gw4e.eclipse.dsl.dSLPolicies.GraphElement
   * @generated
   */
  public Adapter createGraphElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DSLPoliciesAdapterFactory
