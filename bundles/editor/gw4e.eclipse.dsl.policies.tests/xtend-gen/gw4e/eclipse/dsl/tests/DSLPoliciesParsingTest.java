/**
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.tests;

import com.google.inject.Inject;
import gw4e.eclipse.dsl.dSLPolicies.Model;
import gw4e.eclipse.dsl.tests.DSLPoliciesInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(DSLPoliciesInjectorProvider.class)
@SuppressWarnings("all")
public class DSLPoliciesParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void testMultipleGeneratorStopConditionSpaceSeparated() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(reached_vertex(v_VerifyAppRunning)) a_star(reached_edge(e_enterSearchedWord));I;a_star(reached_edge(e_enterSearchedWord));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomReachedVertex() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(reached_vertex(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomReachedEdge() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(reached_edge(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomDependencyEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(dependency_edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomVertexCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(vertex_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomRequirementCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(requirement_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRandomTimeDuration() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=random(time_duration(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomReachedVertex() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(reached_vertex(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomReachedEdge() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(reached_edge(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomDependencyEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(dependency_edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomVertexCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(vertex_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomRequirementCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(requirement_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWeightedRandomTimeDuration() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=weighted_random(time_duration(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomReachedVertex() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(reached_vertex(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      InputOutput.<EList<Resource.Diagnostic>>print(result.eResource().getErrors());
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomReachedEdge() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(reached_edge(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomDependencyEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(dependency_edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomVertexCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(vertex_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomRequirementCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(requirement_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testQuickRandomTimeDuration() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=quick_random(time_duration(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartReachedVertex() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(reached_vertex(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartReachedEdge() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(reached_edge(v_VerifyAppRunning));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartDependencyEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(dependency_edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartEdgeCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(edge_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartVertexCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(vertex_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartRequirementCoverage() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(requirement_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAStartTimeDuration() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(time_duration(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testMulti() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=a_star(time_duration(100));I;quick_random(time_duration(100));I;random(requirement_coverage(100));I;"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testNocheck() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=nocheck"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSync() {
    try {
      final Model result = this.parseHelper.parse(("\n" + "Simple.json=sync"));
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
