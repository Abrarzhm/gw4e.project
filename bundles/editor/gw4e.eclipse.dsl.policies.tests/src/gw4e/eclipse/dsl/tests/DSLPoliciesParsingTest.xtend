/*
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.tests

import com.google.inject.Inject
import gw4e.eclipse.dsl.dSLPolicies.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(DSLPoliciesInjectorProvider)
class DSLPoliciesParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void testMultipleGeneratorStopConditionSpaceSeparated() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(reached_vertex(v_VerifyAppRunning)) a_star(reached_edge(e_enterSearchedWord));I;a_star(reached_edge(e_enterSearchedWord));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	 
	@Test
	def void testRandomReachedVertex() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(reached_vertex(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testRandomReachedEdge() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(reached_edge(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void testRandomDependencyEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(dependency_edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}		
	 	
 	@Test
	def void testRandomEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		 	
 	@Test
	def void testRandomVertexCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(vertex_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testRandomRequirementCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(requirement_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testRandomTimeDuration() {
		val result = parseHelper.parse('\n' + 'Simple.json=random(time_duration(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		  
		  
	@Test
	def void testWeightedRandomReachedVertex() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(reached_vertex(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testWeightedRandomReachedEdge() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(reached_edge(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void testWeightedRandomDependencyEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(dependency_edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}		
	 	
 	@Test
	def void testWeightedRandomEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		 	
 	@Test
	def void testWeightedRandomVertexCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(vertex_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testWeightedRandomRequirementCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(requirement_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testWeightedRandomTimeDuration() {
		val result = parseHelper.parse('\n' + 'Simple.json=weighted_random(time_duration(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}		  
		  
		  
 	@Test
	def void testQuickRandomReachedVertex() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(reached_vertex(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		print(result.eResource.errors)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testQuickRandomReachedEdge() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(reached_edge(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void testQuickRandomDependencyEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(dependency_edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}		
	 	
 	@Test
	def void testQuickRandomEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		 	
 	@Test
	def void testQuickRandomVertexCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(vertex_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testQuickRandomRequirementCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(requirement_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testQuickRandomTimeDuration() {
		val result = parseHelper.parse('\n' + 'Simple.json=quick_random(time_duration(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		@Test
	def void testAStartReachedVertex() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(reached_vertex(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testAStartReachedEdge() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(reached_edge(v_VerifyAppRunning));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void testAStartDependencyEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(dependency_edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}		
	 	
 	@Test
	def void testAStartEdgeCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(edge_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		 	
 	@Test
	def void testAStartVertexCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(vertex_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	
	
 	@Test
	def void testAStartRequirementCoverage() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(requirement_coverage(100));I;' )
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
 	@Test
	def void testAStartTimeDuration() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(time_duration(100));I;')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	 	@Test
	def void testMulti() {
		val result = parseHelper.parse('\n' + 'Simple.json=a_star(time_duration(100));I;quick_random(time_duration(100));I;random(requirement_coverage(100));I;')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	 @Test
	def void testNocheck() {
		val result = parseHelper.parse('\n' + 'Simple.json=nocheck')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		 	@Test
	def void testSync() {
		val result = parseHelper.parse('\n' + 'Simple.json=sync')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
}
