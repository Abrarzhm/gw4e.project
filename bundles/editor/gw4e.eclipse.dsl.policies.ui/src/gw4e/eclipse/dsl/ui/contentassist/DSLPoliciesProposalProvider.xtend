/*
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.ui.contentassist

import gw4e.eclipse.dsl.dSLPolicies.GraphElement
import gw4e.eclipse.dsl.dSLPolicies.StopCondition
import gw4e.eclipse.dsl.validation.EditorHelper
import java.io.File
import java.util.List
import java.util.function.Consumer
import org.eclipse.core.resources.IFile
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.gw4e.eclipse.builder.BuildPolicyManager
import org.gw4e.eclipse.facade.GraphWalkerFacade
import org.gw4e.eclipse.facade.ResourceManager

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DSLPoliciesProposalProvider extends AbstractDSLPoliciesProposalProvider {

	override void complete_Severity(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_Severity");
		super.complete_Severity(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal("I", context));
		acceptor.accept(createCompletionProposal("W", context));
		acceptor.accept(createCompletionProposal("E", context));

	}

	override void complete_SEV(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_SEV");
		super.complete_SEV(model, ruleCall, context, acceptor)

	}

	override void completeIntegerStopCondition_Pathtype(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		System.out.println("---> completeIntegerStopCondition_Pathtype");
		model.eClass().getEAllStructuralFeatures().forEach(new Consumer<EStructuralFeature>() {
			override void accept(EStructuralFeature t) {
				println(t.getName());
			}
		});
	}

	override void completePercentageCondition_Pathtype(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		System.out.println("---> completePercentageCondition_Pathtype");
		model.eClass().getEAllStructuralFeatures().forEach(new Consumer<EStructuralFeature>() {
			override void accept(EStructuralFeature t) {
				println(t.getName());
			}
		});
	}

	override void completeStringCondition_Pathtype(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> completeStringCondition_Pathtype");
		model.eClass().getEAllStructuralFeatures().forEach(new Consumer<EStructuralFeature>() {
			override void accept(EStructuralFeature t) {
				println(t.getName());
			}
		});
	}

	override void complete_Model(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_Model");
		model.eClass().getEAllStructuralFeatures().forEach(new Consumer<EStructuralFeature>() {
			override void accept(EStructuralFeature t) {
				println(t.getName());
			}
		});
	}

	override void complete_NEWLINE(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_NEWLINE");
		model.eClass().getEAllStructuralFeatures().forEach(new Consumer<EStructuralFeature>() {
			override void accept(EStructuralFeature t) {
				println(t.getName());
			}
		});
	}

	override void complete_GraphPolicies(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
			System.out.println("---> complete_GraphPolicies");
		println()
	}

	override void complete_ModelName(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_ModelName");
		var File file = EditorHelper.getEditedFile();
		var IFile ifile = ResourceManager.toIFile (file);
		var List<String> files = BuildPolicyManager.getMissingModelFiles(ifile);
	 	for (String f : files) {
			acceptor.accept(createCompletionProposal(f, context));
		} 
	}

	override void complete_Policies(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
	System.out.println("---> complete_Policies");
		println()
	}

	override void complete_PathGeneratorStopCondition(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_PathGeneratorStopCondition");
		super.complete_PathGeneratorStopCondition(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal("random(reached_vertex(...))", context));
		acceptor.accept(createCompletionProposal("random(reached_edge(...))", context));
		acceptor.accept(createCompletionProposal("random(dependency_edge_coverage(1))", context));
		acceptor.accept(createCompletionProposal("random(edge_coverage(100))", context));
		acceptor.accept(createCompletionProposal("random(vertex_coverage(100))", context));
		acceptor.accept(createCompletionProposal("random(requirement_coverage(100))", context));
		acceptor.accept(createCompletionProposal("random(time_duration(30))", context));
		acceptor.accept(createCompletionProposal("quick_random(reached_vertex(...))", context));
		acceptor.accept(createCompletionProposal("quick_random(reached_edge(...))", context));
		acceptor.accept(createCompletionProposal("quick_random(dependency_edge_coverage(1))", context));
		acceptor.accept(createCompletionProposal("quick_random(edge_coverage(100))", context));
		acceptor.accept(createCompletionProposal("quick_random(vertex_coverage(100))", context));
		acceptor.accept(createCompletionProposal("quick_random(requirement_coverage(100))", context));
		acceptor.accept(createCompletionProposal("quick_random(time_duration(30))", context));
		acceptor.accept(createCompletionProposal("a_star(reached_vertex(...))", context));
		acceptor.accept(createCompletionProposal("a_star(reached_edge(...))", context));
		acceptor.accept(createCompletionProposal("a_star(dependency_edge_coverage(1))", context));
		acceptor.accept(createCompletionProposal("a_star(edge_coverage(100))", context));
		acceptor.accept(createCompletionProposal("a_star(vertex_coverage(100))", context));
		acceptor.accept(createCompletionProposal("a_star(requirement_coverage(100))", context));
		acceptor.accept(createCompletionProposal("a_star(time_duration(30))", context));
	}

	override void complete_IntegerStopCondition(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_IntegerStopCondition");
		acceptor.accept(createCompletionProposal("time_duration(30)", context));
		acceptor.accept(createCompletionProposal("dependency_edge_coverage(1)", context));
	}

	override void complete_PercentageCondition(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_PercentageCondition");
		acceptor.accept(createCompletionProposal("edge_coverage(100)", context));
		acceptor.accept(createCompletionProposal("vertex_coverage(100)", context));
		acceptor.accept(createCompletionProposal("requirement_coverage(100)", context));
	}

	override void complete_StringCondition(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_StringCondition");
		acceptor.accept(createCompletionProposal("reached_vertex(...)", context));
		acceptor.accept(createCompletionProposal("reached_edge(...)", context));
	}

	override void complete_GraphElement(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_GraphElement");
		var StopCondition condition = model as StopCondition;
		var GraphElement ge = condition.getGraphelement();
		if (ge !== null) {
			var File folder = EditorHelper.getEditedFileFolder();
			if(folder === null) return;
			var modelFile = EditorHelper.getModelFileName(condition);
			var File f = new File(folder, modelFile);
			System.out.println("---> complete_GraphElement " + f);
			if ("reached_vertex".equals(condition.getPathtype())) {
				var List<String> vertices = GraphWalkerFacade.getVertices(f);
				for (String vertex : vertices) {
					acceptor.accept(createCompletionProposal(vertex, context));
				}
			}
			if ("reached_edge".equals(condition.getPathtype())) {
				var List<String> edges = GraphWalkerFacade.getEdges(f);
				for (String edge : edges) {
					acceptor.accept(createCompletionProposal(edge, context));
				}
			}
		}
	}

	override void complete_Percent(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_Percent");
		for (var i = 1; i <= 10; i++) {
			acceptor.accept(createCompletionProposal((10 * i) + "", context));
		}
		acceptor.accept(createCompletionProposal("<a_percentage_value>", context));
	}

	override void complete_FORMAT_COMMENT(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		System.out.println("---> complete_FORMAT_COMMENT");
		model.eClass().getEAllStructuralFeatures().forEach(new Consumer<EStructuralFeature>() {
			override void accept(EStructuralFeature t) {
				println(t.getName());
			}
		});
	}
}
