/**
 * generated by Xtext 2.12.0
 */
package gw4e.eclipse.dsl.ui.contentassist;

import gw4e.eclipse.dsl.dSLPolicies.GraphElement;
import gw4e.eclipse.dsl.dSLPolicies.StopCondition;
import gw4e.eclipse.dsl.ui.contentassist.AbstractDSLPoliciesProposalProvider;
import gw4e.eclipse.dsl.validation.EditorHelper;
import java.io.File;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.gw4e.eclipse.builder.BuildPolicyManager;
import org.gw4e.eclipse.facade.GraphWalkerFacade;
import org.gw4e.eclipse.facade.ResourceManager;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class DSLPoliciesProposalProvider extends AbstractDSLPoliciesProposalProvider {
  @Override
  public void complete_Severity(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_Severity");
    super.complete_Severity(model, ruleCall, context, acceptor);
    acceptor.accept(this.createCompletionProposal("I", context));
    acceptor.accept(this.createCompletionProposal("W", context));
    acceptor.accept(this.createCompletionProposal("E", context));
  }
  
  @Override
  public void complete_SEV(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_SEV");
    super.complete_SEV(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void completeIntegerStopCondition_Pathtype(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> completeIntegerStopCondition_Pathtype");
    EList<EStructuralFeature> _eAllStructuralFeatures = model.eClass().getEAllStructuralFeatures();
    _eAllStructuralFeatures.forEach(new Consumer<EStructuralFeature>() {
      @Override
      public void accept(final EStructuralFeature t) {
        InputOutput.<String>println(t.getName());
      }
    });
  }
  
  @Override
  public void completePercentageCondition_Pathtype(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> completePercentageCondition_Pathtype");
    EList<EStructuralFeature> _eAllStructuralFeatures = model.eClass().getEAllStructuralFeatures();
    _eAllStructuralFeatures.forEach(new Consumer<EStructuralFeature>() {
      @Override
      public void accept(final EStructuralFeature t) {
        InputOutput.<String>println(t.getName());
      }
    });
  }
  
  @Override
  public void completeStringCondition_Pathtype(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> completeStringCondition_Pathtype");
    EList<EStructuralFeature> _eAllStructuralFeatures = model.eClass().getEAllStructuralFeatures();
    _eAllStructuralFeatures.forEach(new Consumer<EStructuralFeature>() {
      @Override
      public void accept(final EStructuralFeature t) {
        InputOutput.<String>println(t.getName());
      }
    });
  }
  
  @Override
  public void complete_Model(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_Model");
    EList<EStructuralFeature> _eAllStructuralFeatures = model.eClass().getEAllStructuralFeatures();
    _eAllStructuralFeatures.forEach(new Consumer<EStructuralFeature>() {
      @Override
      public void accept(final EStructuralFeature t) {
        InputOutput.<String>println(t.getName());
      }
    });
  }
  
  @Override
  public void complete_NEWLINE(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_NEWLINE");
    EList<EStructuralFeature> _eAllStructuralFeatures = model.eClass().getEAllStructuralFeatures();
    _eAllStructuralFeatures.forEach(new Consumer<EStructuralFeature>() {
      @Override
      public void accept(final EStructuralFeature t) {
        InputOutput.<String>println(t.getName());
      }
    });
  }
  
  @Override
  public void complete_GraphPolicies(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_GraphPolicies");
    InputOutput.println();
  }
  
  @Override
  public void complete_ModelName(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_ModelName");
    File file = EditorHelper.getEditedFile();
    IFile ifile = ResourceManager.toIFile(file);
    List<String> files = BuildPolicyManager.getMissingModelFiles(ifile);
    for (final String f : files) {
      acceptor.accept(this.createCompletionProposal(f, context));
    }
  }
  
  @Override
  public void complete_Policies(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_Policies");
    InputOutput.println();
  }
  
  private final String[] proposals = { "random(reached_vertex(...))", "random(reached_edge(...))", "random(dependency_edge_coverage(1))", "random(edge_coverage(100))", "random(vertex_coverage(100))", "random(requirement_coverage(100))", "random(time_duration(30))", "weighted_random(reached_vertex(...))", "weighted_random(reached_edge(...))", "weighted_random(dependency_edge_coverage(1))", "weighted_random(edge_coverage(100))", "weighted_random(vertex_coverage(100))", "weighted_random(requirement_coverage(100))", "weighted_random(time_duration(30))", "quick_random(reached_vertex(...))", "quick_random(reached_edge(...))", "quick_random(dependency_edge_coverage(1))", "quick_random(edge_coverage(100))", "quick_random(vertex_coverage(100))", "quick_random(requirement_coverage(100))", "quick_random(time_duration(30))", "a_star(reached_vertex(...))", "a_star(reached_edge(...))", "a_star(dependency_edge_coverage(1))", "a_star(edge_coverage(100))", "a_star(vertex_coverage(100))", "a_star(requirement_coverage(100))", "a_star(time_duration(30))" };
  
  @Override
  public void complete_WS(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_WS");
    super.complete_PathGeneratorStopCondition(model, ruleCall, context, acceptor);
    acceptor.accept(this.createCompletionProposal(";", context));
    for (final String elt : this.proposals) {
      acceptor.accept(this.createCompletionProposal((" " + elt), context));
    }
  }
  
  @Override
  public void complete_PathGeneratorStopCondition(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_PathGeneratorStopCondition");
    super.complete_PathGeneratorStopCondition(model, ruleCall, context, acceptor);
    for (final String elt : this.proposals) {
      acceptor.accept(this.createCompletionProposal(elt, context));
    }
  }
  
  @Override
  public void complete_IntegerStopCondition(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_IntegerStopCondition");
    acceptor.accept(this.createCompletionProposal("time_duration(30)", context));
    acceptor.accept(this.createCompletionProposal("dependency_edge_coverage(1)", context));
  }
  
  @Override
  public void complete_PercentageCondition(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_PercentageCondition");
    acceptor.accept(this.createCompletionProposal("edge_coverage(100)", context));
    acceptor.accept(this.createCompletionProposal("vertex_coverage(100)", context));
    acceptor.accept(this.createCompletionProposal("requirement_coverage(100)", context));
  }
  
  @Override
  public void complete_StringCondition(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_StringCondition");
    acceptor.accept(this.createCompletionProposal("reached_vertex(...)", context));
    acceptor.accept(this.createCompletionProposal("reached_edge(...)", context));
  }
  
  @Override
  public void complete_GraphElement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    try {
      System.out.println("---> complete_GraphElement");
      StopCondition condition = ((StopCondition) model);
      GraphElement ge = condition.getGraphelement();
      if ((ge != null)) {
        File folder = EditorHelper.getEditedFileFolder();
        if ((folder == null)) {
          return;
        }
        String modelFile = EditorHelper.getModelFileName(condition);
        File f = new File(folder, modelFile);
        System.out.println(("---> complete_GraphElement " + f));
        boolean _equals = "reached_vertex".equals(condition.getPathtype());
        if (_equals) {
          List<String> vertices = GraphWalkerFacade.getVertices(f);
          for (final String vertex : vertices) {
            acceptor.accept(this.createCompletionProposal(vertex, context));
          }
        }
        boolean _equals_1 = "reached_edge".equals(condition.getPathtype());
        if (_equals_1) {
          List<String> edges = GraphWalkerFacade.getEdges(f);
          for (final String edge : edges) {
            acceptor.accept(this.createCompletionProposal(edge, context));
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Override
  public void complete_Percent(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_Percent");
    for (int i = 1; (i <= 10); i++) {
      String _plus = (Integer.valueOf((10 * i)) + "");
      acceptor.accept(this.createCompletionProposal(_plus, context));
    }
    acceptor.accept(this.createCompletionProposal("<a_percentage_value>", context));
  }
  
  @Override
  public void complete_FORMAT_COMMENT(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("---> complete_FORMAT_COMMENT");
    EList<EStructuralFeature> _eAllStructuralFeatures = model.eClass().getEAllStructuralFeatures();
    _eAllStructuralFeatures.forEach(new Consumer<EStructuralFeature>() {
      @Override
      public void accept(final EStructuralFeature t) {
        InputOutput.<String>println(t.getName());
      }
    });
  }
}
