<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  gw4e
  $Id:$
  $HeadURL:$
  %%
  Copyright (C) 2017 gw4e-project
  %%
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  #L%
  -->

<cheatsheet
      title="Generating in a new test inheriting an existing one and Debugging it">
   <intro>
      <description>
          In this scenario, we can imagine that you already have a test that works fine. You've updated model with few new nodes and edges and you want to statically (<b>Offline</b> mode ) make sure that the test will work when running with the dynamic way (<b>Online</b> mode ).<br/>
          You will choose to create a new class and you  want to separate physically the new  test and the existing test.<br/>
          After using the wizard, you will have a class ready to run. In a real life, you would not have to much things to do since you've inherited from an existing test.<br/>
      </description>
   </intro>  
   <item
         title="Generating in a new test inheriting an existing one">
      <description>
          Open the <b>src/main/resources/com.company/build.policies</b> file <br/>
          Append the following policy : <b>random(reached_edge(e_ClosePreferencePage));I</b> to this file<br/>
          Save the file<br/>
          Right click the <b>src/main/resources/Simple.json</b> file and select <b>GW4E</b> -&gt;  <b>Convert to...</b><br/>
          Click the <b>Java Offline Test based</b> radio button <br/>
          Click <b>Next</b><br/>
          Click <b>Extending mode</b><br/>
          Select <b>SimpleOffLineImpl.java</b> as class extended<br/>
          Select <b>ExtendedTestImpl</b> as class name<br/>
          
          Select <b>random(reached_edge(e_ClosePreferencePage));I</b><br/>
          A <b>ExtendedTestImpl</b> java class is created from scratch. It inherits from <b>SimpleOffLineImpl</b>It looks like a typical GraphWalker test. Have a look, at the end of the file, you will see a method similar to :<br/>
 
		  	@Test<br/>
			public void test_1494191274382() {<br/>
				System.out.println("Generated with : random(reached_edge(e_ClosePreferencePage))");<br/>
				e_StartApp();<br/>
				v_VerifyAppRunning();<br/>
				e_OpenPreferencesPage();<br/>
				v_VerifyPreferencePage();<br/>
				e_ClosePreferencePage();<br/>
			}<br/>
      </description>
   </item>
   <item
         title="Debugging an offline test">
      <description>
          Set a breakpoint in the <b>e_OpenPreferencesPage()</b> method <br/>
   	      Right-Click the <b>SimpleOffLineImpl.java</b> and select <b>Debug as</b> -&gt; <b>GW4E Test</b>.<br/>
      	  <br/>
      	  At this point, the test is launched and the Eclipse Debugger stops where you set the breakpoint. Test outputs are displayed in the Console view.<br/> You 
		  Now you can step in and out the java code !<br/>
		  Resume the test so that it ends.<br/>
		  <br/>
      </description>
   </item>
</cheatsheet>
