<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  gw4e
  $Id:$
  $HeadURL:$
  %%
  Copyright (C) 2017 gw4e-project
  %%
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  #L%
  -->

<cheatsheet
      title="Generating and Debugging a new offline test">
   <intro>
      <description>
          Generating an offline test is very helpful, when you want to debug a test. Instead of relying on a dynamic path (Online testing), you want to run the test in a static way, so that you can understand quickly what is going on. <br/> 
          After using the wizard, you will have a class ready to run. In a real life, you would need to complete the test.<br/>
          
      </description>
   </intro>  
   <item
         title="Generating a new offline test">
      <description>
          Right click the <b>src/main/resources/com.company/Simple.json</b> file and select <b>GW4E</b> -&gt;  <b>Convert to...</b><br/>
          Click the <b>Java Offline Test based</b> radio button <br/>
          Click <b>Next</b><br/>
          Click <b>Stand Alone mode</b><br/>
          Enter <b>SimpleOffLineImpl</b> as class name<br/>
          Click <b>random(edge_coverage(100))</b><br/>
          Notice that we did not select <b>random(vertex_coverage(100))</b>.<br/> 
          Click <b>Finish</b><br/>
          A java is created from scratch. It looks like a typical GraphWalker test. Have a look, at the end of the file, you will see a method similar to :<br/>
          @Test<br/>
			public void  test_1494189434927() {<br/>
		 		System.out.println("Generated with : random(edge_coverage(100))");<br/>
				e_StartApp();<br/>
				v_VerifyAppRunning();<br/>
				e_OpenPreferencesPage();<br/>
				v_VerifyPreferencePage();<br/>
				e_ClosePreferencePage();<br/>
				v_VerifyAppRunning();<br/>
		  }<br/>         
      </description>
   </item>
   <item
         title="Debugging an offline test">
      <description>
          Set a breakpoint in the <b>e_OpenPreferencesPage()</b> method <br/>
   	      Right-Click the <b>SimpleOffLineImpl.java</b> and select <b>Debug as</b> -&gt; <b>GW4E Test</b>.<br/>
      	  <br/>
      	  At this point, the test is launched and the Eclipse Debugger stops where you set the breakpoint.<br/>  
		  Now you can step in and out the java code !<br/>
		  Resume the test so that it ends. Test outputs are displayed in the Console view.<br/>
      </description>
   </item>
</cheatsheet>
