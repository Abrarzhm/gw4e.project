<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  gw4e
  $Id:$
  $HeadURL:$
  %%
  Copyright (C) 2017 gw4e-project
  %%
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  #L%
  -->

<cheatsheet title="Create a new graph">
   <intro>
      <description>
         Let's do it !
      </description>
   </intro>
   
   <item title="Use the wizard to create the graph" >
       <description>
       Select <b>File  -&gt; New -&gt; GraphWalker Model</b> <br/>   
       Select the <b>gwproject1/src/main/resources/com/company</b> folder you've just created  <br/>   
       Click <b>Empty Model</b> <br/>   
       Select <b>Finish</b> <br/> 
       <br/> 
       An <b>Empty.json</b> file has been created along with a build.policies file. <br/> 
       <br/>
       Refactoring is supported, so we will change the file name before continuing.
       <br/>
       In the <b>Package Explorer</b>, right-click the <b>Empty.json</b> file, and select <b>Refactor -&gt; Rename</b>  <br/>
       Enter <b>Mygraph.json</b> and click <b>OK</b>.<br/>
       Notice that we set a name with an uppercase character. This is a good practice because the java classes that you will generate from this model will follow the same pattern. GraphWalker expects this consistency<br/>
       </description>
   </item>           
   <item title="Show and Review the palette" >
      <description>
      The objective of the model, is to express the expected behavior of the system under test. To
      do so, GraphWalker uses a directed graph, in which a vertex (or a node) represents some desired state,
      and the edges (arcs, arrows, transitions) represents whatever actions need to done 
      in order to achieve that desired state.<br/> 
      When a test is generated from the model, a model derives to a java class and each graph element (Vertex or Edge) is converted to a java method.<br/> <br/> 
      <b>Vertex</b><br/>
		A vertex represents an expected state that we want to examine. In any implementing code/test, this is where youâ€™ll implement the test assertions.   
      <br/> 
      <b>Edge</b><br/>
		Represents the transition from one vertex to another. It is whatever action is needed 
		to be made in order to reach the next state. It could be selecting some menu choice, 
		clicking a button, or making a REST API call. <br/> 	
	  <b>Start vertex</b><br/>
   		 This is used in a vertex to denote the Start vertex. Only one Start vertex per model.<br/>
   	  <b>Shared Vertex</b><br/>
   		  It means that GraphWalker can jump out of the current model, to any other model to a vertex with the same SHARED name.<br/>
   		 <br/>
    GraphWalker only accepts one-way directed edges (arrows).
      In the upper right corner of the editor, click the arrow to expand the palette.<br/><br/>
      There are six tools available :<br/>
      <b>Select</b> Use to select a graph element in the editor<br/>
      <b>Marquee</b> Use to select a multiple graph elements in the editor<br/>
      <b>Vertex</b> Use to create a Vertex node in the graph<br/>
      <b>Shared Vertex</b> Use to create a Shared Vertex node in the graph<br/>
      <b>Start Vertex</b> Use to create a Start Vertex node in the graph<br/>
      <b>Edge</b> Use to create an edge between two vertices in the graph<br/>
      </description>
   </item>       
  <item title="Creating a graph" >
      <description>
       <b>1 -</b>  Click <b>Start Vertex</b> in the palette and drop it on the graph.<br/>
       <b>2 -</b>  Click <b>Vertex</b> in the palette and drop it on the graph. A small blue text editor with a default name is displayed. You can directly enter the vertex name.<br/>
       <b>3 -</b>  Enter <b>v_ClientNotRunning</b> to set the vertex name. If you lost the focus simply click on the default name to display the text editor<br/>
       <b>4 -</b>  Click <b>Edge</b> in the palette, then click the Start vertex, drag your cursor until you are over the vertex, and click the vertex.<br/>
       <b>6 -</b>  Click the <b>Properties</b> view and select the <b>Edge</b> you've just created.<br/>
       <b>7 -</b>  Enter  <b>e_Init</b> into the <b>Name</b> text field, the click the editor to set the name<br/>
       <b>8 -</b>  Click <b>Vertex</b> in the palette and drop it on the graph.<br/>
       <b>9 -</b>  Enter <b>v_LoginPrompted</b> to set the vertex name.  <br/>
       <b>10 -</b>  Click <b>Edge</b> in the palette, then click the <b>v_ClientNotRunning</b> vertex, drag your cursor until you are over the vertex, and click the <b>v_LoginPrompted</b> vertex.<br/>
       <b>11 -</b>  Click the Edge and enter <b>e_StartClient</b> in the <b>Name</b> text field<br/>
      <b>12 -</b>  Click <b>Vertex</b> in the palette and drop it on the graph.<br/>
      <b>13 -</b>  Enter <b>v_Browse</b> to set the vertex name.  <br/>
     <b>14 -</b>  Click <b>Edge</b> in the palette, then click the <b>v_LoginPrompted</b> vertex, drag your cursor until you are over the vertex, and click the <b>v_Browse</b> vertex. An edge has been created with a default name.<br/>
     <b>15 -</b>  Click <b>Edge</b> in the palette, then double-click the <b>v_LoginPrompted</b> vertex. An edge has been created with a default name. A blank rectangle with a default name is displayed. <br/>
     <b>16 -</b>  Click the newly created edge (blank rectangle with a default name) and move your cursor over the rectangle center until a cross appears. Now click the center and drag the cursor in order to have the rectangle located outside the vertex.
     Do the same thing again, until the edge is now built of multiple segments. You can arrange the segments as needed.<br/>
 	 <b>17 -</b>  Default names for the edges have been set. You can change the names to whatever you want.<br/>
 	 <b>18 -</b>  Click the <b>Save</b> button in the toolbar.<br/>
     <b>19 -</b>  Select in the menubar at the top of the workbench Window->Show View->Other...<br/>
 	 <b>20 -</b>  Enter <b>Properties</b> in the text field.<br/>
 	 <b>21 -</b>  Select <b>Properties</b><br/>
 	 <b>22 -</b>  Click OK<br/>
 	 <b>23 -</b>  Click the <b>v_LoginPrompted</b> vertex , you can see the vertex properties displayed.<br/>
 	 <b>24 -</b>  Click the <b>e_StartClient</b> edge , you can see the edge properties displayed.<br/>
 	 <b>25 -</b>  Click the graph , you can see the graph properties displayed.<br/>
 	 <b>26 -</b>  Select <b>Start</b>, in the Start Element list box.<br/>
 	 <b>27 -</b>  Click the <b>Save</b> button in the toolbar.<br/>
     <br/><br/>
     We will see next how to handle model (vertex,edge,graph) properties.
      </description>
   </item>   
       
</cheatsheet>
