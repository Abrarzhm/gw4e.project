<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  gw4e
  $Id:$
  $HeadURL:$
  %%
  Copyright (C) 2017 gw4e-project
  %%
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  #L%
  -->

<cheatsheet title="Generating java tests">
   <intro>
      <description>
         Let's do it !
      </description>
   </intro>
   
   <item title="Understanding the artifacts generation " >
      <description>
        
        There is currently 2 kinds of graph model format : .graphml and .json, and there are many ways to generate artifacts from a Graph Model.<br/> <br/><br/>
       
        Here the options : <br/><br/>
        json graph model -&gt; "Java Model" Based code. To learn GraphWalker apis usage.<br/>
        json graph model -&gt; "Java Test" Based code. To generate Test Interface and a default java implementation from the graph<br/>
        json graph model -&gt; Dot  graph model<br/>
        json graph model -&gt; "Java Interface Test". To generate Test Interface from the graph. You use this option when you already have a test implementation and you have updated your graph model. In that case you would regenerate the interface and make your test implements the newly generated interface so that the test is in sync with the model.<br/>
        <br/>
        graphml graph model -&gt; Json  graph model.<br/>
        graphml graph model -&gt; "Java Model" Based code.To learn GraphWalker apis usage.<br/>
        graphml graph model -&gt; "Java Test" Based code. Test Interface and a default java implementation derived from the graph<br/>
        graphml graph model -&gt; Dot  graph model<br/>
        graphml graph model -&gt; "Java Interface Test". Test Interface derived from the graph<br/>
        <br/>
        The graphml options usage are possible ones but are not recommended. If you have 'graphml' formatted files, you would first convert them to 'json' format and then you would work from the 'json' formattted files.
        <br/><br/>
        Here the different scenarios :<br/>
        1 - Right click the json graph model file and you choose <b> GW4E -&gt; Convert to..."</b>. If you do so, you will have an opportunity to fine tune the generated code.<br/>
        2 - Right click the json graph model file and you choose <b> GW4E -&gt; Generate Test Interface"</b>. If you do so, you will regenerate the interface from the latest saved state of the graph model. It is up to you to update the test implementation to implement the newly generated interface.<br/>
        3 - Right click the <b>src/main/resources</b> folder or <b>src/test/resources</b> folder and you choose <b> GW4E -&gt; Generate Test and Interface"</b>. If you do so, you will generate a default test implementation and an interface from the latest saved state of the graph model. If there is an existing test implementation, it will be renamed. You could use the <b>Eclipse diff/merge</b> tools to update the newly generated test. Notice that in that case you don't have the opportunity to fine tune the generated code. <br/>
 		<br/>
 		Model files in <b>src/test/resources</b> generate java class in <b>src/test/java</b> while 
        those in <b>src/main/resources</b> generate in <b>src/main/java</b>.<br/> The same way, a java interface is generated in the <b>target/generated-sources</b> directory or <b>generated-test-sources</b>
        This structure complies with the GraphWalker command line tools expectation. This means that you can work without any changes in the two environments (GW4E Eclipse Plugin vs  GraphWalker Command line tools).<br/>
 		<br/>
 		In the next steps you will play with the first scenario.<br/><br/>
 		The test interface name derives directly from the graph name. In fact only the extension is changed from ".json" to ".java".<br/>
 		The test implementation name follows the same rule except that a suffix is added to the name. The default suffix is <b>Impl</b>.<br/> 
 		For example, a graph model named <b>MyGraph.json</b> will result into an interface named <b>MyGraph.java</b> and a test implementation named <b>MyGraphImpl.java</b><br/>
 		
 		You can change the default extension value, to do so :<br/>
 		Right click the project and select <b>Properties</b><br/>
 		Select <b>GW4E</b> in the left pane<br/>
 		Locate the <b>Test Impl. Suffix</b> text field in the right pane<br/>
 		Set the value you want and click <b>OK</b>. This value will be taken into account on the next Test Generation.<br/>
 		<br/>
 		
 		The location of the test interface and implementation depend on the location of the model file. <br/>
 		Any graph model located under <b>src/main/resources</b> will respectively result in code generation under <b>target/generated-sources</b> and <b>src/main/java</b> <br/>
 		Any graph model located under <b>src/test/resources</b> will respectively result in code generation under <b>target/generated-test-sources</b> and <b>src/test/java</b> <br/>
      </description>
   </item>  
   <item title="Choosing the tests you want to generate" >
      <description>
      In this steps you generate java source tests from the graph model file. There are different kind of tests.
      <br/>
      <b>GraphWalker Class Based Test</b> : the generated java class file contains a GraphWalker Annotation<br/>
      <b>GraphWalker Model Based Test</b> : the generated java class file contains a method that shows GraphWalker Model Apis usage<br/>
      <b>JUnit Smoke Test</b> : the generated java class file contains a test to verify the basic flow of the model<br/>
      <b>JUnit Functional Test</b> : the generated java class file contains a test covering the complete graph<br/>
      <b>JUnit Stability Test</b> : the generated java class file contains a test that randomly walk the model, until the stop condition is fulfilled<br/>
     <br/>
     In some cases test execution requires preparation of environment, data or special settings.<br/>
	 GraphWalker has the same functionality in the next list of annotations:<br/>
	<b>@BeforeExecution</b> : annotated method will be triggered before the GraphWalker execution<br/>
	<b>@AfterExecution</b> : annotated method will be triggered after the GraphWalker execution<br/>
	<b>@BeforeElement</b> : annotated method will be triggered before any element invocation (edge or vertex) in the GraphWalker execution<br/>
	<b>@AfterElement</b> : annotated method will be triggered after any element invocation (edge or vertex) in the GraphWalker execution<br/>
     <br/><br/>
      In the wizard we will use soon, you will see all of these wizard options, even though we will not use all of them.
     <br/><br/>
      In the Package Explorer, right-click the <b>Simple.json</b> file and select <b>GW4E->Convert to...</b><br/>
      select <b>Java Test Based</b>,<br/>
      click Next,<br/>
      click <b>GraphWalker Class Based Test</b> (let the default values),<br/>
      click Next,<br/>
      click <b>JUnit Smoke Test</b>,<br/>
      select <b>v_VerifyPreferencePage</b> for the target Vertex,<br/>
      select <b>JUnit Functional Test</b>,<br/>
      select <b>JUnit Stability Test</b>,<br/>
      select <b>Start</b> for the start element,<br/>
      click Next,<br/>
      click <b>Before/After Execution hook method</b>,<br/>
      click <b>Performance JSON Report</b>,<br/>
      click Finish<br/>
      <br />
      In the Package Explorer, you can see the newly created java source file , and on the right side an opened java editor.
    </description>
   </item>
  <item title="Quick tour of what's get generated" >
      <description>
      In the previous step, you created a java class file from the graph model. Here what you got: <br/>
      @Generated(...) annotation : Used for internal purpose. Don't change the value.<br/>
      @GraphWalker(...) annotation :  It defines the path generator of this test,  and defines the first element in the model to be executed. (Element is
      either a vertex or an edge). This class can be ran by the maven <b>"mvn graphwalker:test"</b> command or the plugin launcher that we will see soon.<br/>
      <br/><br/>
      A <b>JUnit Smoke Test</b> method : runSmokeTest()
      <br />
      A <b>JUnit Functional Test</b> method : runFunctionalTest()
      <br />
      A <b>JUnit Stability Test</b> method : runStabilityTest()
      <br /><br/>
      As you can see these methods differ mainly on the GENERATOR(STOPCONDITION)<br/>
      <br/>
      A Performance JSON Report statistics summary method : <b>_afterExecution()</b> It gives some details about the execution time of vertices and edges.
 	<br /><br />
 	  Notice that as the model file is included in a package , the generated java classes has the same java package name.
      You can see that every edge and vertex are represented by java method. The generated method contains print to output so that you can see something fancy when we will run the tests.
      In a real life, your next step would be to fill all of the methods with your java code. A pattern is that you add actions to your “edge” methods,
      and assertions to your “vertex” methods. <br/>
    <br /><br />  
      Model files in <b>src/test/resources</b> generate java class in <b>src/test/java</b> while 
      those in <b>src/main/resources</b> generate in <b>src/main/java</b>.<br/> The same way, a java interface is also generated in the <b>target/generated-sources</b> directory or <b>generated-test-sources</b>
      This structure complies with the GraphWalker command line tools expectation. This means that you can work without any changes in the two environments (GW4E Eclipse Plugin vs  GraphWalker Command line tools).<br/>
 	<br/>
 	  You will learn later how to use the Eclipse refactoring to move all of these artifacts in a real package. 
 	
 	 </description>
   </item>   
  
</cheatsheet>
