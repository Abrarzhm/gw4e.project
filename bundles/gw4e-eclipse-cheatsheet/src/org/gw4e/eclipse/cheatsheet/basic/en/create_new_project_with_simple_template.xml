<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  gw4e
  $Id:$
  $HeadURL:$
  %%
  Copyright (C) 2017 gw4e-project
  %%
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  #L%
  -->

<cheatsheet title="Create a project from scratch">
   <intro>
      <description>
         Let's do it !
      </description>
   </intro>
   
    <item title="Open the GW4E Perspective" contextId="org.gw4e.eclipse.cheatseet.basic.open_gw4e_perspective_action">
      <description>
         Select in the menubar at the top of the workbench Window->Perspective->Open Perspective->Other ... <br/>
         In the opened window select "GW4E Perspective" and click OK. <br/>
         These steps change the perspective to set up the Eclipse workbench for GW4E development.
         <br />
      </description>
   </item>
   <item title="Create the project" >
      <description>
      Before creating a graph and use the GW4E features, we need a project to put it in. 
      <br/>In the main toolbar, select in the menubar at the top of the workbench File->New->GW4E Project. 
      <br />
      Enter <b>gwproject</b> for the project name,<br/> 
      click Next,<br/>
      click Next,<br/>
      select <b>Simple Model</b>,<br/>
      keep the "Build Policies" option to <b>Default Build Policies</b>,<br/>
      click Next,<br/>
      click Finish<br/>
      <br />
      In the Package Explorer, you can see the newly created project , and on the right side an opened editor with a simple graph.
      Notice that a <b>build.policies</b> file has been created in the same folder as the graph file. This folder matches the <b>Maven Group Id</b> set in the wizard.
      </description>
   </item>
  <item title="Edit a build policies file" >
      <description>
      In the previous step , you created a graph model file. In order to determine whether there are issues with your model while editing it, and to analyze it
      while building the project, we created a build policies file with default values since this is the option we selected in the project wizard.<br/>
      It is a list of GraphWalker GENERATOR(STOP_CONDITION). In a real life you will update this file according with the GENERATOR(STOP_CONDITION) that you will use in your tests implementations. 
      There is a feature that try to analyze your java test code and update automatically the build.policies file.  
      <br/><br/>
      For more information on Generator/Stop Condition visit :  http://graphwalker.org/docs/path_generators_and_stop_conditions 
      <br/> 
      For more information on Checking model visit :  http://graphwalker.github.io/cli-check/  
      <br /><br/>
      In the Package Explorer, right click your the build.policies file and select Open With... -&gt; GW4E Build Policies Editor.<br/> 
      The editor opens the file and you can read the syntax as follows : <br/><br/>
      'Graph file name' =  COMMA_SEPARATED_LIST_OF_GENERATOR(STOP_CONDITION);<br/><br/>
      <b>COMMA_SEPARATED_LIST_OF_GENERATOR(STOP_CONDITION)</b> : (GENERATOR(STOP_CONDITION);SEVERITY;)*<br/>
      <b>SEVERITY</b> : I | W | E<br/>
      <b>GENERATOR(STOP_CONDITION)</b> :  See GraphWalker documentation<br/>
	<br/> 
      The build.policies file contains default policies. The default can be managed in the GW4E preference, you will learn how to do so in a different tutorial. 
  	   As you can see, the configuration leads to 2 checks when building the project. The plugin must check and analyze the graph file with the following GENERATOR(STOPCONDITION);SEVERITY<br/>
  	 <b> random(vertex_coverage(100));I;</b><br/>
  	 <b> random(edge_coverage(100));I;</b><br/>
  	  Notice the letter following the GENERATOR(STOPCONDITION);SEVERITY, it tells the build what kind of error in the problem view, should be raised in case the checker founds a problem.<br/>
  	  <b>I</b> for <b>Information</b><br/>
  	  <b>W</b> for <b>Warning</b><br/>
  	  <b>E</b> for <b>Error</b><br/>     
	<br/> 
	  Select Window --&gt; Show --&gt; View --&gt; Other... <br/>
	  Enter Problems and click OK<br/>
	  Change the <b>random</b> to <b>randomXX</b> <br/>
	  Save the file<br/>
	  Errors are now displayed in the Problem view, as you can see the build.policies file is also checked for correct configuration.
      (If no error appears , check that the Build Automatically menu option is checked in the toolbar)<br/>
      Restore the previous value and save the file <br/>
      Select Project --&gt; Clean <br/>
      Click OK<br/>
      The errors are removed from the Problem View.<br/>
      <br/>
      In the Package Explorer, right click your the build.policies file and select <b>Delete</b>
      An error is now displayed in the Problem view, asking for a build.policies file. As you can see in the Package Explorer, a red cross is over the graph file name, meaning it is in error.<br/>
       
      In the Problem View,<br/>
      Right click "Expecting a build.policies file in ..."<br/>
      Select "Quick Fix"<br/>
      Click the Finish button<br/>
      <br/>
      The build.policies file is created in the same folder as the graph file. It is expected to have such build file in any folder containing a graph file.
      Graph files can only be created in packages located under <b>src/test/resources</b> or <b>src/main/resources</b>.<br/>
      Notice that a new error is now raised. It tells you that there is no defined policies for the graph. This is done to raise your attention and to guide you to define them.
  	 </description>
   </item>   
 <item title="Configuring a build policies file" >
      <description>
      In the previous step, you created a build policies file for your graph model file, but you did not set yet which GENERATOR(STOPCONDITION) you want to associate to the graph file.<br/> 
      <br/>
      In the problem View,<br/>
      Right click "No policies found for ..."<br/>
      Select "Quick Fix"<br/>
      Select "Add default policies"<br/>
      Click the Finish button<br/>
      <br/>
      The build.policies file is updated with default policies. The default can be managed in the GW4E preference, you will learn how to do so in a different tutorial. 
  	  An editor is opened. As you can see, you told that 2 checks have to happen when building this graph file and that the plugin must check and analyze the graph file with the following GENERATOR(STOPCONDITION)<br/>
  	 <b> random(vertex_coverage(100));I;</b><br/>
  	 <b> random(edge_coverage(100));I;</b><br/>
  	  Notice the letter following the GENERATOR(STOPCONDITION), it tells the build what kind of error in the problem view, should be raised in case the checker found a problem.<br/>
  	  <b>I</b> for <b>Information</b><br/>
  	  <b>W</b> for <b>Warning</b><br/>
  	  <b>E</b> for <b>Error</b><br/>
  	  
  	  <br/>
  	  In the previous step you've chosen "Default policies" , you may have noticed other option :<br/>
  	  Update <b>Simple.json</b> to <b>Simple1.json</b> in the build.policies file, and save it. <br/>
  	  Two errors are now displayed<br/>
  	  1 - No policies found for ...<br/>
  	  2 - Unexisting Graph Model ...<br/>
  	  The second message is intended to raise your attention on a possible misspelled file.<br/>
  	  Remove the line <b>Simple1.json = ...</b> and save your work, we only have one error message now. <br/><br/>
  	  Right click "No policies found for ..."<br/>
      Select "Quick Fix"<br/>
      Select "Add No Check policies". A new entry is added to the policies file.<br/>
      When analyzing the graph model each GENERATOR(STOPCONDITION) is processed in the order it is found in the build.polcies.<br/>
      This is done until the analyzer reaches the end of the configuration line or when it founds a <b>nocheck</b> keyword.<br/>
      Here in our tutorial, we only have a <b>nocheck</b> keyword, which means that the graph model won't be analyzed at all.<br/><br/>
      
      Remove the line <b>Simple.json = ...</b> and save your work, we have one error message now. <br/><br/>
  	  Right click "No policies found for ..."<br/>
      Select "Quick Fix"<br/>
      Select "Add Sync'ed policies". A new entry is added to the policies file.<br/>
      In the next step , you will learn how to generate a java test from a Graph Model. For now let's imagine you know how we can derive a java test from a Graph Model.<br/>
      Whenever you will save a derived java test, it will be parsed and, the build.policies entry for this model will be updated according to the GENERATOR(STOPCONDITION) used in the java test code.<br/>
  	 </description>
   </item>      
</cheatsheet>
